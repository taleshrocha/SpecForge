"""Requirements API controller for handling requirement-related endpoints."""

from typing import List
from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel
import logging

from backend.requirements.dtos.requirement_dto import RequirementDTO
from backend.requirements.models.requirement import Requirement
from backend.requirements.services.requirements_service import RequirementsService
from backend.requirements.models.wiegers_matrix import WiegersMatrix
from backend.requirements.services.wiegers_service import WiegersService

# Set up logging
logger = logging.getLogger(__name__)

router = APIRouter(prefix="/requirement", tags=["requirement"])

class WiegersAnalysisRequest(BaseModel):
    """Request model for Wiegers matrix analysis."""
    requirement_ids: List[str]

@router.post("", response_model=Requirement)
async def create_requirement(requirement: RequirementDTO):
    """Create a new requirement.
    
    Args:
        requirement: The requirement data to create.
        
    Returns:
        The created requirement.
    """
    service = RequirementsService()
    try:
        created_requirement = await service.create_requirement(requirement)
        return created_requirement
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create requirement: {str(e)}")

@router.post("/ai-description", response_model=Requirement)
async def create_requirement_with_ai_description(requirement: RequirementDTO):
    """Create a new requirement with AI-generated description.
    
    Args:
        requirement: The requirement data to create (description will be generated by AI).
        
    Returns:
        The created requirement with AI-generated description.
    """
    service = RequirementsService()
    try:
        created_requirement = await service.create_requirement_with_ai_description(requirement)
        return created_requirement
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create requirement with AI description: {str(e)}")

@router.get("", response_model=List[Requirement])
async def get_requirements():
    """Get all requirements.
    
    Returns:
        List of all requirements.
    """
    logger.info("GET /requirement endpoint called")
    service = RequirementsService()
    try:
        requirements = await service.get_all_requirements()
        logger.info(f"Returning {len(requirements)} requirements")
        return requirements
    except Exception as e:
        logger.error(f"Failed to retrieve requirements: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to retrieve requirements: {str(e)}")

@router.get("/{requirement_id}", response_model=Requirement)
async def get_requirement(requirement_id: str):
    """Get a specific requirement by ID.
    
    Args:
        requirement_id: The unique identifier for the requirement.
        
    Returns:
        The requirement data.
        
    Raises:
        HTTPException: When requirement ID is invalid or requirement not found.
    """
    service = RequirementsService()
    try:
        requirement = await service.get_requirement_by_id(requirement_id)
        if requirement is None:
            raise HTTPException(status_code=404, detail="Requirement not found")
        return requirement
    except HTTPException:
        # Re-raise HTTPExceptions (like our 404) without wrapping them
        raise
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to retrieve requirement: {str(e)}")

@router.post("/wiegers/analyze", response_model=List[WiegersMatrix])
async def analyze_requirements(request: WiegersAnalysisRequest):
    """Generate Wiegers matrix analysis for requirements using AI.
    
    Args:
        request: Request containing list of requirement IDs
        
    Returns:
        List of created WiegersMatrix objects ordered by priority
        
    Raises:
        HTTPException: When analysis fails
    """
    wiegers_service = WiegersService()
    try:
        matrices = await wiegers_service.generate_and_save_matrices(request.requirement_ids)
        return matrices
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.get("/wiegers", response_model=List[WiegersMatrix])
async def get_all_matrices():
    """Get all Wiegers matrices ordered by priority.
    
    Returns:
        List of WiegersMatrix objects
    """
    wiegers_service = WiegersService()
    try:
        return await wiegers_service.get_all()
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao buscar matrizes Wiegers: {str(e)}"
        )

@router.get("/wiegers/{requirement_id}", response_model=WiegersMatrix)
async def get_matrix_by_requirement(requirement_id: str):
    """Get Wiegers matrix by requirement ID.
    
    Args:
        requirement_id: The requirement ID
        
    Returns:
        WiegersMatrix object
        
    Raises:
        HTTPException: When matrix not found
    """
    wiegers_service = WiegersService()
    try:
        matrix = await wiegers_service.get_by_requirement_id(requirement_id)
        if not matrix:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Matriz Wiegers n√£o encontrada para este requisito"
            )
        return matrix
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao buscar matriz Wiegers: {str(e)}"
        )
